// grid variables
$grid-columns: 12;
$grid-max-width: 100%;
$grid-width: 100%;

$breakpoints: (
  'small':  ( min-width:  340px ),
  'medium': ( min-width:  992px ),
  'large':  ( min-width: 1200px )
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin border-box {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

*,
*:after,
*:before {
  margin: 0;
  padding: 0;
  @include border-box;
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

img {
  width: auto;
  max-width: 100%;
  height: auto !important;
  vertical-align: bottom;
}

.is-full {
  width: 100%;
  margin: 0 auto;
}

.is-full,
.row {
  @extend %clearfix;
}

[class*='column-'] {
  float: left;
  padding: 1em 1em 0 1em;
  width: 100%;
  min-height: 1px;
}

@include respond-to('medium') {

  .is-full {
    width: $grid-width;
    max-width: $grid-max-width;
  }

  @for $i from 1 through $grid-columns {

    .column-#{$i} {
      width: 100% / $grid-columns * $i;
    }

  }

}